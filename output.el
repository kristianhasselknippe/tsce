(require 'cl)
(require 'ht)
(require 'dash)

(setq lexical-binding t)

(defun ts/to-string (item)
  (if (numberp item)
	  (number-to-string item)
	item))

(defun ts/+ (a b)
  (if (or (stringp a) (stringp b))
	  (concat (ts/to-string a) (ts/to-string b))
	(+ a b)))

(defun tslog (msg)
  (print (ts/to-string msg)))

(setq TS (ht 
		  ('consolelog #'tslog)
		  ('len #'length)))

(defun tsarray (items)
  (lexical-let ((items items))
	(ht
	 ('get (lambda (index) (nth index items)))
	 ('forEach (lambda (mapper)
				 (-each items mapper)))
	 ('length (lambda () (length items)))
	 ('push
	  (lambda (item)
		(setq items (append items `(,item)))))
	 ('pop
	  (lambda ()
		(let ((ret (last items)))
		  (setq items (butlast items))
		  ret))))))

(defun do-with-current-buffer (buffer action)
  (with-current-buffer buffer
	(funcall action)))

 (cl-defun assignment-and-loops ( to)
    (block block96393-assignmentAndLoops
        (let ((foo (ts/+ 1 2)))
            (let ((i 0))
                (while (< i to)
                    (setq foo (ts/+ foo 1))
                    (message  (ts/+ "heisann: " foo))
                    (cl-return-from block96393-assignmentAndLoops foo)
                    (setq i (1+ i))
                )
            )
        )
    )
)
(assignment-and-loops  123)
(cl-defun object-creation ()
    (block block43327-objectCreation
        (let ((heisann "ok"))
            (let ((foo 
    (ht
('hei "foobar")
        ('heisann heisann)
        ('foo 123)
        ('bar (ht
('testing "123123")
))
    )))
                (cl-return-from block43327-objectCreation (ht-get (ht-get foo 'bar) 'testing))
            )
        )
    )
)
(object-creation )
(cl-defun lambdas ()
    (block block38202-lambdas
        (let ((foo 
    (ht
('do-it (lambda ( foobar bar)
        (block block82478-lambda
            (cl-return-from block82478-lambda (ts/+ foobar bar))
        )
))
    )))
            (cl-return-from block38202-lambdas (funcall (ht-get foo 'do-it)  "hei" "sann"))
        )
    )
)
(lambdas )
(cl-defun operators ()
    (block block43935-operators
        (let ((foo (ts/+ 1 2)))
            (let ((bar (ts/+ 2 "heisann")))
                (let ((tull (ts/+ "ball " "ok da")))
                    (let ((heisann (ts/+ (ts/+ "testing " 1) "heisann")))
                        (tslog  heisann)
                    )
                    (tslog  tull)
                )
                (tslog  bar)
            )
            (tslog  foo)
        )
    )
)
(operators )
(cl-defun arrays ()
    (block block36819-arrays
        (let ((foo '()))
            (let ((bar '( 1 2 3 4)))
                (cl-return-from block36819-arrays (nth 3 bar))
            )
        )
    )
)
(arrays )
(cl-defun class-test ()
    (block block34665-classTest
        (let ((test 
    (ht
('length (lambda ()
        (block block88061-lambda
            (tslog  "Testing it")
        )
))
        ('items '( 1 2 3))
    )))
            (funcall (ht-get test 'length) )
            (cl-return-from block34665-classTest (ht-get test 'items))
        )
    )
)
(class-test )
(cl-defun bar1 ( index)
    (block block11983-bar1
        (cl-return-from block11983-bar1 index)
    )
)
(bar1  20)
(cl-defun foo1 ()
    (block block35204-foo1
        (let ((ret "hei"))
            (cl-return-from block35204-foo1 ret)
        )
    )
)
(foo1 )
(cl-defun arrays-and-stuff1 ()
    (block block10444-arraysAndStuff1
        (let ((items (tsarray  '( 1 2 3))))
            (funcall (ht-get items 'push)  4)
            (funcall (ht-get items 'push)  5)
            (funcall (ht-get items 'push)  6)
            (funcall (ht-get items 'push)  7)
            (cl-return-from block10444-arraysAndStuff1 (funcall (ht-get items 'length) ))
        )
    )
)
(arrays-and-stuff1 )
(cl-defun arrays-and-stuff2 ()
    (block block15856-arraysAndStuff2
        (let ((items (tsarray  '( 1 2 3 4 5 6))))
            (let ((foo (funcall (ht-get items 'length) )))
                (tslog  foo)
                (cl-return-from block15856-arraysAndStuff2 (funcall (ht-get items 'get)  4))
            )
        )
    )
)
(arrays-and-stuff2 )
(cl-defun working-with-buffers ()
    (block block52334-workingWithBuffers
        (let ((foo (get-buffer-create  "a cool buffer")))
            (do-with-current-buffer  foo (lambda ()
        (block block60532-lambda
            (tslog  "Foooooooooooobar")
            (insert  "dette er en test")
            (tslog  (ts/+ "Point max " (point-max )))
        )
))
            (cl-return-from block52334-workingWithBuffers foo)
        )
    )
	)

(working-with-buffers)
